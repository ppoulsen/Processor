|Processor
pc[0] <= program_counter:inst.a_out[0]
pc[1] <= program_counter:inst.a_out[1]
pc[2] <= program_counter:inst.a_out[2]
pc[3] <= program_counter:inst.a_out[3]
pc[4] <= program_counter:inst.a_out[4]
pc[5] <= program_counter:inst.a_out[5]
pc[6] <= program_counter:inst.a_out[6]
pc[7] <= program_counter:inst.a_out[7]
reset => Clock1Hz:inst21.reset
on-board_oscillator => Clock1Hz:inst21.clk


|Processor|program_counter:inst
a_in[0] => a_out[0]~reg0.DATAIN
a_in[1] => a_out[1]~reg0.DATAIN
a_in[2] => a_out[2]~reg0.DATAIN
a_in[3] => a_out[3]~reg0.DATAIN
a_in[4] => a_out[4]~reg0.DATAIN
a_in[5] => a_out[5]~reg0.DATAIN
a_in[6] => a_out[6]~reg0.DATAIN
a_in[7] => a_out[7]~reg0.DATAIN
clk_in => a_out[7]~reg0.CLK
clk_in => a_out[6]~reg0.CLK
clk_in => a_out[5]~reg0.CLK
clk_in => a_out[4]~reg0.CLK
clk_in => a_out[3]~reg0.CLK
clk_in => a_out[2]~reg0.CLK
clk_in => a_out[1]~reg0.CLK
clk_in => a_out[0]~reg0.CLK
a_out[0] <= a_out[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
a_out[1] <= a_out[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
a_out[2] <= a_out[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
a_out[3] <= a_out[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
a_out[4] <= a_out[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
a_out[5] <= a_out[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
a_out[6] <= a_out[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
a_out[7] <= a_out[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Processor|Clock1Hz:inst21
reset => cnt[13].ACLR
reset => cnt[12].ACLR
reset => cnt[11].ACLR
reset => cnt[10].ACLR
reset => cnt[9].ACLR
reset => cnt[8].ACLR
reset => cnt[7].ACLR
reset => cnt[6].ACLR
reset => cnt[5].ACLR
reset => cnt[4].ACLR
reset => cnt[3].ACLR
reset => cnt[2].ACLR
reset => cnt[1].ACLR
reset => cnt[0].ACLR
reset => clockTmp.ACLR
clk => cnt[13].CLK
clk => cnt[12].CLK
clk => cnt[11].CLK
clk => cnt[10].CLK
clk => cnt[9].CLK
clk => cnt[8].CLK
clk => cnt[7].CLK
clk => cnt[6].CLK
clk => cnt[5].CLK
clk => cnt[4].CLK
clk => cnt[3].CLK
clk => cnt[2].CLK
clk => cnt[1].CLK
clk => cnt[0].CLK
clk => clockTmp.CLK
clock <= clockTmp.DB_MAX_OUTPUT_PORT_TYPE


|Processor|mux:inst5
mux1_a[0] => mux1_out~7.DATAB
mux1_a[1] => mux1_out~6.DATAB
mux1_a[2] => mux1_out~5.DATAB
mux1_a[3] => mux1_out~4.DATAB
mux1_a[4] => mux1_out~3.DATAB
mux1_a[5] => mux1_out~2.DATAB
mux1_a[6] => mux1_out~1.DATAB
mux1_a[7] => mux1_out~0.DATAB
mux1_b[0] => mux1_out~7.DATAA
mux1_b[1] => mux1_out~6.DATAA
mux1_b[2] => mux1_out~5.DATAA
mux1_b[3] => mux1_out~4.DATAA
mux1_b[4] => mux1_out~3.DATAA
mux1_b[5] => mux1_out~2.DATAA
mux1_b[6] => mux1_out~1.DATAA
mux1_b[7] => mux1_out~0.DATAA
mux1_choice => mux1_out~7.OUTPUTSELECT
mux1_choice => mux1_out~6.OUTPUTSELECT
mux1_choice => mux1_out~5.OUTPUTSELECT
mux1_choice => mux1_out~4.OUTPUTSELECT
mux1_choice => mux1_out~3.OUTPUTSELECT
mux1_choice => mux1_out~2.OUTPUTSELECT
mux1_choice => mux1_out~1.OUTPUTSELECT
mux1_choice => mux1_out~0.OUTPUTSELECT
mux1_out[0] <= mux1_out~7.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[1] <= mux1_out~6.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[2] <= mux1_out~5.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[3] <= mux1_out~4.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[4] <= mux1_out~3.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[5] <= mux1_out~2.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[6] <= mux1_out~1.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[7] <= mux1_out~0.DB_MAX_OUTPUT_PORT_TYPE


|Processor|alu:inst12
x[0] => Add1.IN16
x[0] => Add0.IN8
x[0] => ShiftRight0.IN8
x[0] => ShiftLeft0.IN8
x[0] => result~16.IN0
x[0] => result~8.IN0
x[0] => result~0.IN0
x[1] => Add1.IN15
x[1] => Add0.IN7
x[1] => ShiftRight0.IN7
x[1] => ShiftLeft0.IN7
x[1] => result~17.IN0
x[1] => result~9.IN0
x[1] => result~1.IN0
x[2] => Add1.IN14
x[2] => Add0.IN6
x[2] => ShiftRight0.IN6
x[2] => ShiftLeft0.IN6
x[2] => result~18.IN0
x[2] => result~10.IN0
x[2] => result~2.IN0
x[3] => Add1.IN13
x[3] => Add0.IN5
x[3] => ShiftRight0.IN5
x[3] => ShiftLeft0.IN5
x[3] => result~19.IN0
x[3] => result~11.IN0
x[3] => result~3.IN0
x[4] => Add1.IN12
x[4] => Add0.IN4
x[4] => ShiftRight0.IN4
x[4] => ShiftLeft0.IN4
x[4] => result~20.IN0
x[4] => result~12.IN0
x[4] => result~4.IN0
x[5] => Add1.IN11
x[5] => Add0.IN3
x[5] => ShiftRight0.IN3
x[5] => ShiftLeft0.IN3
x[5] => result~21.IN0
x[5] => result~13.IN0
x[5] => result~5.IN0
x[6] => Add1.IN10
x[6] => Add0.IN2
x[6] => ShiftRight0.IN2
x[6] => ShiftLeft0.IN2
x[6] => result~22.IN0
x[6] => result~14.IN0
x[6] => result~6.IN0
x[7] => Add1.IN9
x[7] => Add0.IN1
x[7] => ShiftRight0.IN1
x[7] => ShiftLeft0.IN1
x[7] => result~23.IN0
x[7] => result~15.IN0
x[7] => result~7.IN0
y[0] => Add0.IN16
y[0] => ShiftRight0.IN16
y[0] => ShiftLeft0.IN16
y[0] => result~16.IN1
y[0] => result~8.IN1
y[0] => result~0.IN1
y[0] => Add1.IN8
y[1] => Add0.IN15
y[1] => ShiftRight0.IN15
y[1] => ShiftLeft0.IN15
y[1] => result~17.IN1
y[1] => result~9.IN1
y[1] => result~1.IN1
y[1] => Add1.IN7
y[2] => Add0.IN14
y[2] => ShiftRight0.IN14
y[2] => ShiftLeft0.IN14
y[2] => result~18.IN1
y[2] => result~10.IN1
y[2] => result~2.IN1
y[2] => Add1.IN6
y[3] => Add0.IN13
y[3] => ShiftRight0.IN13
y[3] => ShiftLeft0.IN13
y[3] => result~19.IN1
y[3] => result~11.IN1
y[3] => result~3.IN1
y[3] => Add1.IN5
y[4] => Add0.IN12
y[4] => ShiftRight0.IN12
y[4] => ShiftLeft0.IN12
y[4] => result~20.IN1
y[4] => result~12.IN1
y[4] => result~4.IN1
y[4] => Add1.IN4
y[5] => Add0.IN11
y[5] => ShiftRight0.IN11
y[5] => ShiftLeft0.IN11
y[5] => result~21.IN1
y[5] => result~13.IN1
y[5] => result~5.IN1
y[5] => Add1.IN3
y[6] => Add0.IN10
y[6] => ShiftRight0.IN10
y[6] => ShiftLeft0.IN10
y[6] => result~22.IN1
y[6] => result~14.IN1
y[6] => result~6.IN1
y[6] => Add1.IN2
y[7] => Add0.IN9
y[7] => ShiftRight0.IN9
y[7] => ShiftLeft0.IN9
y[7] => result~23.IN1
y[7] => result~15.IN1
y[7] => result~7.IN1
y[7] => Add1.IN1
opcode[0] => Mux7.IN10
opcode[0] => Mux6.IN10
opcode[0] => Mux5.IN10
opcode[0] => Mux4.IN10
opcode[0] => Mux3.IN10
opcode[0] => Mux2.IN10
opcode[0] => Mux1.IN10
opcode[0] => Mux0.IN10
opcode[1] => Mux7.IN9
opcode[1] => Mux6.IN9
opcode[1] => Mux5.IN9
opcode[1] => Mux4.IN9
opcode[1] => Mux3.IN9
opcode[1] => Mux2.IN9
opcode[1] => Mux1.IN9
opcode[1] => Mux0.IN9
opcode[2] => Mux7.IN8
opcode[2] => Mux6.IN8
opcode[2] => Mux5.IN8
opcode[2] => Mux4.IN8
opcode[2] => Mux3.IN8
opcode[2] => Mux2.IN8
opcode[2] => Mux1.IN8
opcode[2] => Mux0.IN8
output[0] <= Mux7.DB_MAX_OUTPUT_PORT_TYPE
output[1] <= Mux6.DB_MAX_OUTPUT_PORT_TYPE
output[2] <= Mux5.DB_MAX_OUTPUT_PORT_TYPE
output[3] <= Mux4.DB_MAX_OUTPUT_PORT_TYPE
output[4] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
output[5] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
output[6] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
output[7] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE
less_than[0] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE
less_than[1] <= <GND>
less_than[2] <= <GND>
less_than[3] <= <GND>
less_than[4] <= <GND>
less_than[5] <= <GND>
less_than[6] <= <GND>
less_than[7] <= <GND>
zero <= Equal0.DB_MAX_OUTPUT_PORT_TYPE


|Processor|alu_control:inst1
immediate_op[0] => result~2.DATAA
immediate_op[1] => result~1.DATAA
immediate_op[2] => result~0.DATAA
immediate_op[3] => ~NO_FANOUT~
immediate_op[4] => ~NO_FANOUT~
immediate_op[5] => ~NO_FANOUT~
control_op[0] => result~2.DATAB
control_op[1] => result~1.DATAB
control_op[2] => result~0.DATAB
alu_src => result~2.OUTPUTSELECT
alu_src => result~1.OUTPUTSELECT
alu_src => result~0.OUTPUTSELECT
result[0] <= result~2.DB_MAX_OUTPUT_PORT_TYPE
result[1] <= result~1.DB_MAX_OUTPUT_PORT_TYPE
result[2] <= result~0.DB_MAX_OUTPUT_PORT_TYPE


|Processor|controller:inst3
op_code[0] => Mux11.IN19
op_code[0] => Mux10.IN19
op_code[0] => Mux9.IN19
op_code[0] => Mux8.IN19
op_code[0] => Mux7.IN19
op_code[0] => Mux6.IN10
op_code[0] => Mux5.IN19
op_code[0] => Mux4.IN19
op_code[0] => Mux3.IN19
op_code[0] => Mux2.IN19
op_code[0] => Mux1.IN19
op_code[0] => Mux0.IN19
op_code[1] => Mux11.IN18
op_code[1] => Mux10.IN18
op_code[1] => Mux9.IN18
op_code[1] => Mux8.IN18
op_code[1] => Mux7.IN18
op_code[1] => Mux5.IN18
op_code[1] => Mux4.IN18
op_code[1] => Mux3.IN18
op_code[1] => Mux2.IN18
op_code[1] => Mux1.IN18
op_code[1] => Mux0.IN18
op_code[2] => Mux11.IN17
op_code[2] => Mux10.IN17
op_code[2] => Mux9.IN17
op_code[2] => Mux8.IN17
op_code[2] => Mux7.IN17
op_code[2] => Mux6.IN9
op_code[2] => Mux5.IN17
op_code[2] => Mux4.IN17
op_code[2] => Mux3.IN17
op_code[2] => Mux2.IN17
op_code[2] => Mux1.IN17
op_code[2] => Mux0.IN17
op_code[3] => Mux11.IN16
op_code[3] => Mux10.IN16
op_code[3] => Mux9.IN16
op_code[3] => Mux8.IN16
op_code[3] => Mux7.IN16
op_code[3] => Mux6.IN8
op_code[3] => Mux5.IN16
op_code[3] => Mux4.IN16
op_code[3] => Mux3.IN16
op_code[3] => Mux2.IN16
op_code[3] => Mux1.IN16
op_code[3] => Mux0.IN16
clk_in => Beq~reg0.CLK
clk_in => Bne~reg0.CLK
clk_in => RegDest~reg0.CLK
clk_in => MemRead~reg0.CLK
clk_in => MemtoReg~reg0.CLK
clk_in => ALUOp[2]~reg0.CLK
clk_in => ALUOp[1]~reg0.CLK
clk_in => ALUOp[0]~reg0.CLK
clk_in => RegWrite~reg0.CLK
clk_in => ALUSrc~reg0.CLK
clk_in => JumpDest~reg0.CLK
clk_in => LessThan~reg0.CLK
clk_in => MemWrite~reg0.CLK
clk_in => ALUArg~reg0.CLK
Beq <= Beq~reg0.DB_MAX_OUTPUT_PORT_TYPE
Bne <= Bne~reg0.DB_MAX_OUTPUT_PORT_TYPE
RegDest <= RegDest~reg0.DB_MAX_OUTPUT_PORT_TYPE
MemRead <= MemRead~reg0.DB_MAX_OUTPUT_PORT_TYPE
MemWrite <= MemWrite~reg0.DB_MAX_OUTPUT_PORT_TYPE
MemtoReg <= MemtoReg~reg0.DB_MAX_OUTPUT_PORT_TYPE
ALUOp[0] <= ALUOp[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
ALUOp[1] <= ALUOp[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
ALUOp[2] <= ALUOp[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
ALUSrc <= ALUSrc~reg0.DB_MAX_OUTPUT_PORT_TYPE
RegWrite <= RegWrite~reg0.DB_MAX_OUTPUT_PORT_TYPE
JumpDest <= JumpDest~reg0.DB_MAX_OUTPUT_PORT_TYPE
LessThan <= LessThan~reg0.DB_MAX_OUTPUT_PORT_TYPE
ALUArg <= ALUArg~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Processor|q_splitter:inst19
q_in[0] => out5[0].DATAIN
q_in[1] => out5[1].DATAIN
q_in[2] => out5[2].DATAIN
q_in[3] => out5[3].DATAIN
q_in[3] => out4[0].DATAIN
q_in[4] => out5[4].DATAIN
q_in[4] => out4[1].DATAIN
q_in[5] => out5[5].DATAIN
q_in[5] => out4[2].DATAIN
q_in[6] => out3[0].DATAIN
q_in[7] => out3[1].DATAIN
q_in[8] => out3[2].DATAIN
q_in[9] => out2[0].DATAIN
q_in[10] => out2[1].DATAIN
q_in[11] => out2[2].DATAIN
q_in[12] => out1[0].DATAIN
q_in[13] => out1[1].DATAIN
q_in[14] => out1[2].DATAIN
q_in[15] => out1[3].DATAIN
out1[0] <= q_in[12].DB_MAX_OUTPUT_PORT_TYPE
out1[1] <= q_in[13].DB_MAX_OUTPUT_PORT_TYPE
out1[2] <= q_in[14].DB_MAX_OUTPUT_PORT_TYPE
out1[3] <= q_in[15].DB_MAX_OUTPUT_PORT_TYPE
out2[0] <= q_in[9].DB_MAX_OUTPUT_PORT_TYPE
out2[1] <= q_in[10].DB_MAX_OUTPUT_PORT_TYPE
out2[2] <= q_in[11].DB_MAX_OUTPUT_PORT_TYPE
out3[0] <= q_in[6].DB_MAX_OUTPUT_PORT_TYPE
out3[1] <= q_in[7].DB_MAX_OUTPUT_PORT_TYPE
out3[2] <= q_in[8].DB_MAX_OUTPUT_PORT_TYPE
out4[0] <= q_in[3].DB_MAX_OUTPUT_PORT_TYPE
out4[1] <= q_in[4].DB_MAX_OUTPUT_PORT_TYPE
out4[2] <= q_in[5].DB_MAX_OUTPUT_PORT_TYPE
out5[0] <= q_in[0].DB_MAX_OUTPUT_PORT_TYPE
out5[1] <= q_in[1].DB_MAX_OUTPUT_PORT_TYPE
out5[2] <= q_in[2].DB_MAX_OUTPUT_PORT_TYPE
out5[3] <= q_in[3].DB_MAX_OUTPUT_PORT_TYPE
out5[4] <= q_in[4].DB_MAX_OUTPUT_PORT_TYPE
out5[5] <= q_in[5].DB_MAX_OUTPUT_PORT_TYPE


|Processor|lpm_rom0:inst2
address[0] => lpm_rom:lpm_rom_component.address[0]
address[1] => lpm_rom:lpm_rom_component.address[1]
address[2] => lpm_rom:lpm_rom_component.address[2]
address[3] => lpm_rom:lpm_rom_component.address[3]
address[4] => lpm_rom:lpm_rom_component.address[4]
address[5] => lpm_rom:lpm_rom_component.address[5]
address[6] => lpm_rom:lpm_rom_component.address[6]
address[7] => lpm_rom:lpm_rom_component.address[7]
inclock => lpm_rom:lpm_rom_component.inclock
outclock => lpm_rom:lpm_rom_component.outclock
q[0] <= lpm_rom:lpm_rom_component.q[0]
q[1] <= lpm_rom:lpm_rom_component.q[1]
q[2] <= lpm_rom:lpm_rom_component.q[2]
q[3] <= lpm_rom:lpm_rom_component.q[3]
q[4] <= lpm_rom:lpm_rom_component.q[4]
q[5] <= lpm_rom:lpm_rom_component.q[5]
q[6] <= lpm_rom:lpm_rom_component.q[6]
q[7] <= lpm_rom:lpm_rom_component.q[7]
q[8] <= lpm_rom:lpm_rom_component.q[8]
q[9] <= lpm_rom:lpm_rom_component.q[9]
q[10] <= lpm_rom:lpm_rom_component.q[10]
q[11] <= lpm_rom:lpm_rom_component.q[11]
q[12] <= lpm_rom:lpm_rom_component.q[12]
q[13] <= lpm_rom:lpm_rom_component.q[13]
q[14] <= lpm_rom:lpm_rom_component.q[14]
q[15] <= lpm_rom:lpm_rom_component.q[15]


|Processor|lpm_rom0:inst2|lpm_rom:lpm_rom_component
address[0] => altrom:srom.address[0]
address[1] => altrom:srom.address[1]
address[2] => altrom:srom.address[2]
address[3] => altrom:srom.address[3]
address[4] => altrom:srom.address[4]
address[5] => altrom:srom.address[5]
address[6] => altrom:srom.address[6]
address[7] => altrom:srom.address[7]
inclock => altrom:srom.clocki
outclock => altrom:srom.clocko
memenab => otri[15].OE
memenab => otri[14].OE
memenab => otri[13].OE
memenab => otri[12].OE
memenab => otri[11].OE
memenab => otri[10].OE
memenab => otri[9].OE
memenab => otri[8].OE
memenab => otri[7].OE
memenab => otri[6].OE
memenab => otri[5].OE
memenab => otri[4].OE
memenab => otri[3].OE
memenab => otri[2].OE
memenab => otri[1].OE
memenab => otri[0].OE
q[0] <= otri[0].DB_MAX_OUTPUT_PORT_TYPE
q[1] <= otri[1].DB_MAX_OUTPUT_PORT_TYPE
q[2] <= otri[2].DB_MAX_OUTPUT_PORT_TYPE
q[3] <= otri[3].DB_MAX_OUTPUT_PORT_TYPE
q[4] <= otri[4].DB_MAX_OUTPUT_PORT_TYPE
q[5] <= otri[5].DB_MAX_OUTPUT_PORT_TYPE
q[6] <= otri[6].DB_MAX_OUTPUT_PORT_TYPE
q[7] <= otri[7].DB_MAX_OUTPUT_PORT_TYPE
q[8] <= otri[8].DB_MAX_OUTPUT_PORT_TYPE
q[9] <= otri[9].DB_MAX_OUTPUT_PORT_TYPE
q[10] <= otri[10].DB_MAX_OUTPUT_PORT_TYPE
q[11] <= otri[11].DB_MAX_OUTPUT_PORT_TYPE
q[12] <= otri[12].DB_MAX_OUTPUT_PORT_TYPE
q[13] <= otri[13].DB_MAX_OUTPUT_PORT_TYPE
q[14] <= otri[14].DB_MAX_OUTPUT_PORT_TYPE
q[15] <= otri[15].DB_MAX_OUTPUT_PORT_TYPE


|Processor|lpm_rom0:inst2|lpm_rom:lpm_rom_component|altrom:srom
address[0] => segment[0][15].WADDR
address[0] => segment[0][15].RADDR
address[0] => segment[0][14].WADDR
address[0] => segment[0][14].RADDR
address[0] => segment[0][13].WADDR
address[0] => segment[0][13].RADDR
address[0] => segment[0][12].WADDR
address[0] => segment[0][12].RADDR
address[0] => segment[0][11].WADDR
address[0] => segment[0][11].RADDR
address[0] => segment[0][10].WADDR
address[0] => segment[0][10].RADDR
address[0] => segment[0][9].WADDR
address[0] => segment[0][9].RADDR
address[0] => segment[0][8].WADDR
address[0] => segment[0][8].RADDR
address[0] => segment[0][7].WADDR
address[0] => segment[0][7].RADDR
address[0] => segment[0][6].WADDR
address[0] => segment[0][6].RADDR
address[0] => segment[0][5].WADDR
address[0] => segment[0][5].RADDR
address[0] => segment[0][4].WADDR
address[0] => segment[0][4].RADDR
address[0] => segment[0][3].WADDR
address[0] => segment[0][3].RADDR
address[0] => segment[0][2].WADDR
address[0] => segment[0][2].RADDR
address[0] => segment[0][1].WADDR
address[0] => segment[0][1].RADDR
address[0] => segment[0][0].WADDR
address[0] => segment[0][0].RADDR
address[1] => segment[0][15].WADDR1
address[1] => segment[0][15].RADDR1
address[1] => segment[0][14].WADDR1
address[1] => segment[0][14].RADDR1
address[1] => segment[0][13].WADDR1
address[1] => segment[0][13].RADDR1
address[1] => segment[0][12].WADDR1
address[1] => segment[0][12].RADDR1
address[1] => segment[0][11].WADDR1
address[1] => segment[0][11].RADDR1
address[1] => segment[0][10].WADDR1
address[1] => segment[0][10].RADDR1
address[1] => segment[0][9].WADDR1
address[1] => segment[0][9].RADDR1
address[1] => segment[0][8].WADDR1
address[1] => segment[0][8].RADDR1
address[1] => segment[0][7].WADDR1
address[1] => segment[0][7].RADDR1
address[1] => segment[0][6].WADDR1
address[1] => segment[0][6].RADDR1
address[1] => segment[0][5].WADDR1
address[1] => segment[0][5].RADDR1
address[1] => segment[0][4].WADDR1
address[1] => segment[0][4].RADDR1
address[1] => segment[0][3].WADDR1
address[1] => segment[0][3].RADDR1
address[1] => segment[0][2].WADDR1
address[1] => segment[0][2].RADDR1
address[1] => segment[0][1].WADDR1
address[1] => segment[0][1].RADDR1
address[1] => segment[0][0].WADDR1
address[1] => segment[0][0].RADDR1
address[2] => segment[0][15].WADDR2
address[2] => segment[0][15].RADDR2
address[2] => segment[0][14].WADDR2
address[2] => segment[0][14].RADDR2
address[2] => segment[0][13].WADDR2
address[2] => segment[0][13].RADDR2
address[2] => segment[0][12].WADDR2
address[2] => segment[0][12].RADDR2
address[2] => segment[0][11].WADDR2
address[2] => segment[0][11].RADDR2
address[2] => segment[0][10].WADDR2
address[2] => segment[0][10].RADDR2
address[2] => segment[0][9].WADDR2
address[2] => segment[0][9].RADDR2
address[2] => segment[0][8].WADDR2
address[2] => segment[0][8].RADDR2
address[2] => segment[0][7].WADDR2
address[2] => segment[0][7].RADDR2
address[2] => segment[0][6].WADDR2
address[2] => segment[0][6].RADDR2
address[2] => segment[0][5].WADDR2
address[2] => segment[0][5].RADDR2
address[2] => segment[0][4].WADDR2
address[2] => segment[0][4].RADDR2
address[2] => segment[0][3].WADDR2
address[2] => segment[0][3].RADDR2
address[2] => segment[0][2].WADDR2
address[2] => segment[0][2].RADDR2
address[2] => segment[0][1].WADDR2
address[2] => segment[0][1].RADDR2
address[2] => segment[0][0].WADDR2
address[2] => segment[0][0].RADDR2
address[3] => segment[0][15].WADDR3
address[3] => segment[0][15].RADDR3
address[3] => segment[0][14].WADDR3
address[3] => segment[0][14].RADDR3
address[3] => segment[0][13].WADDR3
address[3] => segment[0][13].RADDR3
address[3] => segment[0][12].WADDR3
address[3] => segment[0][12].RADDR3
address[3] => segment[0][11].WADDR3
address[3] => segment[0][11].RADDR3
address[3] => segment[0][10].WADDR3
address[3] => segment[0][10].RADDR3
address[3] => segment[0][9].WADDR3
address[3] => segment[0][9].RADDR3
address[3] => segment[0][8].WADDR3
address[3] => segment[0][8].RADDR3
address[3] => segment[0][7].WADDR3
address[3] => segment[0][7].RADDR3
address[3] => segment[0][6].WADDR3
address[3] => segment[0][6].RADDR3
address[3] => segment[0][5].WADDR3
address[3] => segment[0][5].RADDR3
address[3] => segment[0][4].WADDR3
address[3] => segment[0][4].RADDR3
address[3] => segment[0][3].WADDR3
address[3] => segment[0][3].RADDR3
address[3] => segment[0][2].WADDR3
address[3] => segment[0][2].RADDR3
address[3] => segment[0][1].WADDR3
address[3] => segment[0][1].RADDR3
address[3] => segment[0][0].WADDR3
address[3] => segment[0][0].RADDR3
address[4] => segment[0][15].WADDR4
address[4] => segment[0][15].RADDR4
address[4] => segment[0][14].WADDR4
address[4] => segment[0][14].RADDR4
address[4] => segment[0][13].WADDR4
address[4] => segment[0][13].RADDR4
address[4] => segment[0][12].WADDR4
address[4] => segment[0][12].RADDR4
address[4] => segment[0][11].WADDR4
address[4] => segment[0][11].RADDR4
address[4] => segment[0][10].WADDR4
address[4] => segment[0][10].RADDR4
address[4] => segment[0][9].WADDR4
address[4] => segment[0][9].RADDR4
address[4] => segment[0][8].WADDR4
address[4] => segment[0][8].RADDR4
address[4] => segment[0][7].WADDR4
address[4] => segment[0][7].RADDR4
address[4] => segment[0][6].WADDR4
address[4] => segment[0][6].RADDR4
address[4] => segment[0][5].WADDR4
address[4] => segment[0][5].RADDR4
address[4] => segment[0][4].WADDR4
address[4] => segment[0][4].RADDR4
address[4] => segment[0][3].WADDR4
address[4] => segment[0][3].RADDR4
address[4] => segment[0][2].WADDR4
address[4] => segment[0][2].RADDR4
address[4] => segment[0][1].WADDR4
address[4] => segment[0][1].RADDR4
address[4] => segment[0][0].WADDR4
address[4] => segment[0][0].RADDR4
address[5] => segment[0][15].WADDR5
address[5] => segment[0][15].RADDR5
address[5] => segment[0][14].WADDR5
address[5] => segment[0][14].RADDR5
address[5] => segment[0][13].WADDR5
address[5] => segment[0][13].RADDR5
address[5] => segment[0][12].WADDR5
address[5] => segment[0][12].RADDR5
address[5] => segment[0][11].WADDR5
address[5] => segment[0][11].RADDR5
address[5] => segment[0][10].WADDR5
address[5] => segment[0][10].RADDR5
address[5] => segment[0][9].WADDR5
address[5] => segment[0][9].RADDR5
address[5] => segment[0][8].WADDR5
address[5] => segment[0][8].RADDR5
address[5] => segment[0][7].WADDR5
address[5] => segment[0][7].RADDR5
address[5] => segment[0][6].WADDR5
address[5] => segment[0][6].RADDR5
address[5] => segment[0][5].WADDR5
address[5] => segment[0][5].RADDR5
address[5] => segment[0][4].WADDR5
address[5] => segment[0][4].RADDR5
address[5] => segment[0][3].WADDR5
address[5] => segment[0][3].RADDR5
address[5] => segment[0][2].WADDR5
address[5] => segment[0][2].RADDR5
address[5] => segment[0][1].WADDR5
address[5] => segment[0][1].RADDR5
address[5] => segment[0][0].WADDR5
address[5] => segment[0][0].RADDR5
address[6] => segment[0][15].WADDR6
address[6] => segment[0][15].RADDR6
address[6] => segment[0][14].WADDR6
address[6] => segment[0][14].RADDR6
address[6] => segment[0][13].WADDR6
address[6] => segment[0][13].RADDR6
address[6] => segment[0][12].WADDR6
address[6] => segment[0][12].RADDR6
address[6] => segment[0][11].WADDR6
address[6] => segment[0][11].RADDR6
address[6] => segment[0][10].WADDR6
address[6] => segment[0][10].RADDR6
address[6] => segment[0][9].WADDR6
address[6] => segment[0][9].RADDR6
address[6] => segment[0][8].WADDR6
address[6] => segment[0][8].RADDR6
address[6] => segment[0][7].WADDR6
address[6] => segment[0][7].RADDR6
address[6] => segment[0][6].WADDR6
address[6] => segment[0][6].RADDR6
address[6] => segment[0][5].WADDR6
address[6] => segment[0][5].RADDR6
address[6] => segment[0][4].WADDR6
address[6] => segment[0][4].RADDR6
address[6] => segment[0][3].WADDR6
address[6] => segment[0][3].RADDR6
address[6] => segment[0][2].WADDR6
address[6] => segment[0][2].RADDR6
address[6] => segment[0][1].WADDR6
address[6] => segment[0][1].RADDR6
address[6] => segment[0][0].WADDR6
address[6] => segment[0][0].RADDR6
address[7] => segment[0][15].WADDR7
address[7] => segment[0][15].RADDR7
address[7] => segment[0][14].WADDR7
address[7] => segment[0][14].RADDR7
address[7] => segment[0][13].WADDR7
address[7] => segment[0][13].RADDR7
address[7] => segment[0][12].WADDR7
address[7] => segment[0][12].RADDR7
address[7] => segment[0][11].WADDR7
address[7] => segment[0][11].RADDR7
address[7] => segment[0][10].WADDR7
address[7] => segment[0][10].RADDR7
address[7] => segment[0][9].WADDR7
address[7] => segment[0][9].RADDR7
address[7] => segment[0][8].WADDR7
address[7] => segment[0][8].RADDR7
address[7] => segment[0][7].WADDR7
address[7] => segment[0][7].RADDR7
address[7] => segment[0][6].WADDR7
address[7] => segment[0][6].RADDR7
address[7] => segment[0][5].WADDR7
address[7] => segment[0][5].RADDR7
address[7] => segment[0][4].WADDR7
address[7] => segment[0][4].RADDR7
address[7] => segment[0][3].WADDR7
address[7] => segment[0][3].RADDR7
address[7] => segment[0][2].WADDR7
address[7] => segment[0][2].RADDR7
address[7] => segment[0][1].WADDR7
address[7] => segment[0][1].RADDR7
address[7] => segment[0][0].WADDR7
address[7] => segment[0][0].RADDR7
clocki => segment[0][15].CLK0
clocki => segment[0][14].CLK0
clocki => segment[0][13].CLK0
clocki => segment[0][12].CLK0
clocki => segment[0][11].CLK0
clocki => segment[0][10].CLK0
clocki => segment[0][9].CLK0
clocki => segment[0][8].CLK0
clocki => segment[0][7].CLK0
clocki => segment[0][6].CLK0
clocki => segment[0][5].CLK0
clocki => segment[0][4].CLK0
clocki => segment[0][3].CLK0
clocki => segment[0][2].CLK0
clocki => segment[0][1].CLK0
clocki => segment[0][0].CLK0
clocko => segment[0][15].CLK1
clocko => segment[0][14].CLK1
clocko => segment[0][13].CLK1
clocko => segment[0][12].CLK1
clocko => segment[0][11].CLK1
clocko => segment[0][10].CLK1
clocko => segment[0][9].CLK1
clocko => segment[0][8].CLK1
clocko => segment[0][7].CLK1
clocko => segment[0][6].CLK1
clocko => segment[0][5].CLK1
clocko => segment[0][4].CLK1
clocko => segment[0][3].CLK1
clocko => segment[0][2].CLK1
clocko => segment[0][1].CLK1
clocko => segment[0][0].CLK1
q[0] <= segment[0][0].DATAOUT
q[1] <= segment[0][1].DATAOUT
q[2] <= segment[0][2].DATAOUT
q[3] <= segment[0][3].DATAOUT
q[4] <= segment[0][4].DATAOUT
q[5] <= segment[0][5].DATAOUT
q[6] <= segment[0][6].DATAOUT
q[7] <= segment[0][7].DATAOUT
q[8] <= segment[0][8].DATAOUT
q[9] <= segment[0][9].DATAOUT
q[10] <= segment[0][10].DATAOUT
q[11] <= segment[0][11].DATAOUT
q[12] <= segment[0][12].DATAOUT
q[13] <= segment[0][13].DATAOUT
q[14] <= segment[0][14].DATAOUT
q[15] <= segment[0][15].DATAOUT


|Processor|eightbit_register_file:inst9
data_in[0] => regfile~9.DATAIN
data_in[0] => regfile.DATAIN
data_in[1] => regfile~8.DATAIN
data_in[1] => regfile.DATAIN1
data_in[2] => regfile~7.DATAIN
data_in[2] => regfile.DATAIN2
data_in[3] => regfile~6.DATAIN
data_in[3] => regfile.DATAIN3
data_in[4] => regfile~5.DATAIN
data_in[4] => regfile.DATAIN4
data_in[5] => regfile~4.DATAIN
data_in[5] => regfile.DATAIN5
data_in[6] => regfile~3.DATAIN
data_in[6] => regfile.DATAIN6
data_in[7] => regfile~2.DATAIN
data_in[7] => regfile.DATAIN7
write_reg[0] => regfile~1.DATAIN
write_reg[0] => regfile.WADDR
write_reg[1] => regfile~0.DATAIN
write_reg[1] => regfile.WADDR1
write_reg[2] => ~NO_FANOUT~
read_reg1[0] => regfile.RADDR
read_reg1[1] => regfile.RADDR1
read_reg1[2] => ~NO_FANOUT~
read_reg2[0] => regfile.PORTBRADDR
read_reg2[1] => regfile.PORTBRADDR1
read_reg2[2] => ~NO_FANOUT~
reg_write => regfile~10.DATAIN
reg_write => regfile.WE
clk_in => regfile~9.CLK
clk_in => regfile~8.CLK
clk_in => regfile~7.CLK
clk_in => regfile~6.CLK
clk_in => regfile~5.CLK
clk_in => regfile~4.CLK
clk_in => regfile~3.CLK
clk_in => regfile~2.CLK
clk_in => regfile~1.CLK
clk_in => regfile~0.CLK
clk_in => regfile~10.CLK
clk_in => regfile.CLK0
out1[0] <= regfile.DATAOUT
out1[1] <= regfile.DATAOUT1
out1[2] <= regfile.DATAOUT2
out1[3] <= regfile.DATAOUT3
out1[4] <= regfile.DATAOUT4
out1[5] <= regfile.DATAOUT5
out1[6] <= regfile.DATAOUT6
out1[7] <= regfile.DATAOUT7
out2[0] <= regfile.PORTBDATAOUT
out2[1] <= regfile.PORTBDATAOUT1
out2[2] <= regfile.PORTBDATAOUT2
out2[3] <= regfile.PORTBDATAOUT3
out2[4] <= regfile.PORTBDATAOUT4
out2[5] <= regfile.PORTBDATAOUT5
out2[6] <= regfile.PORTBDATAOUT6
out2[7] <= regfile.PORTBDATAOUT7


|Processor|mux:inst17
mux1_a[0] => mux1_out~7.DATAB
mux1_a[1] => mux1_out~6.DATAB
mux1_a[2] => mux1_out~5.DATAB
mux1_a[3] => mux1_out~4.DATAB
mux1_a[4] => mux1_out~3.DATAB
mux1_a[5] => mux1_out~2.DATAB
mux1_a[6] => mux1_out~1.DATAB
mux1_a[7] => mux1_out~0.DATAB
mux1_b[0] => mux1_out~7.DATAA
mux1_b[1] => mux1_out~6.DATAA
mux1_b[2] => mux1_out~5.DATAA
mux1_b[3] => mux1_out~4.DATAA
mux1_b[4] => mux1_out~3.DATAA
mux1_b[5] => mux1_out~2.DATAA
mux1_b[6] => mux1_out~1.DATAA
mux1_b[7] => mux1_out~0.DATAA
mux1_choice => mux1_out~7.OUTPUTSELECT
mux1_choice => mux1_out~6.OUTPUTSELECT
mux1_choice => mux1_out~5.OUTPUTSELECT
mux1_choice => mux1_out~4.OUTPUTSELECT
mux1_choice => mux1_out~3.OUTPUTSELECT
mux1_choice => mux1_out~2.OUTPUTSELECT
mux1_choice => mux1_out~1.OUTPUTSELECT
mux1_choice => mux1_out~0.OUTPUTSELECT
mux1_out[0] <= mux1_out~7.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[1] <= mux1_out~6.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[2] <= mux1_out~5.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[3] <= mux1_out~4.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[4] <= mux1_out~3.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[5] <= mux1_out~2.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[6] <= mux1_out~1.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[7] <= mux1_out~0.DB_MAX_OUTPUT_PORT_TYPE


|Processor|mux:inst16
mux1_a[0] => mux1_out~7.DATAB
mux1_a[1] => mux1_out~6.DATAB
mux1_a[2] => mux1_out~5.DATAB
mux1_a[3] => mux1_out~4.DATAB
mux1_a[4] => mux1_out~3.DATAB
mux1_a[5] => mux1_out~2.DATAB
mux1_a[6] => mux1_out~1.DATAB
mux1_a[7] => mux1_out~0.DATAB
mux1_b[0] => mux1_out~7.DATAA
mux1_b[1] => mux1_out~6.DATAA
mux1_b[2] => mux1_out~5.DATAA
mux1_b[3] => mux1_out~4.DATAA
mux1_b[4] => mux1_out~3.DATAA
mux1_b[5] => mux1_out~2.DATAA
mux1_b[6] => mux1_out~1.DATAA
mux1_b[7] => mux1_out~0.DATAA
mux1_choice => mux1_out~7.OUTPUTSELECT
mux1_choice => mux1_out~6.OUTPUTSELECT
mux1_choice => mux1_out~5.OUTPUTSELECT
mux1_choice => mux1_out~4.OUTPUTSELECT
mux1_choice => mux1_out~3.OUTPUTSELECT
mux1_choice => mux1_out~2.OUTPUTSELECT
mux1_choice => mux1_out~1.OUTPUTSELECT
mux1_choice => mux1_out~0.OUTPUTSELECT
mux1_out[0] <= mux1_out~7.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[1] <= mux1_out~6.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[2] <= mux1_out~5.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[3] <= mux1_out~4.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[4] <= mux1_out~3.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[5] <= mux1_out~2.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[6] <= mux1_out~1.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[7] <= mux1_out~0.DB_MAX_OUTPUT_PORT_TYPE


|Processor|lpm_ram_dq0:inst13
address[0] => lpm_ram_dq:lpm_ram_dq_component.address[0]
address[1] => lpm_ram_dq:lpm_ram_dq_component.address[1]
address[2] => lpm_ram_dq:lpm_ram_dq_component.address[2]
address[3] => lpm_ram_dq:lpm_ram_dq_component.address[3]
address[4] => lpm_ram_dq:lpm_ram_dq_component.address[4]
address[5] => lpm_ram_dq:lpm_ram_dq_component.address[5]
address[6] => lpm_ram_dq:lpm_ram_dq_component.address[6]
address[7] => lpm_ram_dq:lpm_ram_dq_component.address[7]
data[0] => lpm_ram_dq:lpm_ram_dq_component.data[0]
data[1] => lpm_ram_dq:lpm_ram_dq_component.data[1]
data[2] => lpm_ram_dq:lpm_ram_dq_component.data[2]
data[3] => lpm_ram_dq:lpm_ram_dq_component.data[3]
data[4] => lpm_ram_dq:lpm_ram_dq_component.data[4]
data[5] => lpm_ram_dq:lpm_ram_dq_component.data[5]
data[6] => lpm_ram_dq:lpm_ram_dq_component.data[6]
data[7] => lpm_ram_dq:lpm_ram_dq_component.data[7]
inclock => lpm_ram_dq:lpm_ram_dq_component.inclock
outclock => lpm_ram_dq:lpm_ram_dq_component.outclock
we => lpm_ram_dq:lpm_ram_dq_component.we
q[0] <= lpm_ram_dq:lpm_ram_dq_component.q[0]
q[1] <= lpm_ram_dq:lpm_ram_dq_component.q[1]
q[2] <= lpm_ram_dq:lpm_ram_dq_component.q[2]
q[3] <= lpm_ram_dq:lpm_ram_dq_component.q[3]
q[4] <= lpm_ram_dq:lpm_ram_dq_component.q[4]
q[5] <= lpm_ram_dq:lpm_ram_dq_component.q[5]
q[6] <= lpm_ram_dq:lpm_ram_dq_component.q[6]
q[7] <= lpm_ram_dq:lpm_ram_dq_component.q[7]


|Processor|lpm_ram_dq0:inst13|lpm_ram_dq:lpm_ram_dq_component
data[0] => altram:sram.data[0]
data[1] => altram:sram.data[1]
data[2] => altram:sram.data[2]
data[3] => altram:sram.data[3]
data[4] => altram:sram.data[4]
data[5] => altram:sram.data[5]
data[6] => altram:sram.data[6]
data[7] => altram:sram.data[7]
address[0] => altram:sram.address[0]
address[1] => altram:sram.address[1]
address[2] => altram:sram.address[2]
address[3] => altram:sram.address[3]
address[4] => altram:sram.address[4]
address[5] => altram:sram.address[5]
address[6] => altram:sram.address[6]
address[7] => altram:sram.address[7]
inclock => altram:sram.clocki
outclock => altram:sram.clocko
we => altram:sram.we
q[0] <= altram:sram.q[0]
q[1] <= altram:sram.q[1]
q[2] <= altram:sram.q[2]
q[3] <= altram:sram.q[3]
q[4] <= altram:sram.q[4]
q[5] <= altram:sram.q[5]
q[6] <= altram:sram.q[6]
q[7] <= altram:sram.q[7]


|Processor|lpm_ram_dq0:inst13|lpm_ram_dq:lpm_ram_dq_component|altram:sram
we => segment[0][7].WE
we => segment[0][6].WE
we => segment[0][5].WE
we => segment[0][4].WE
we => segment[0][3].WE
we => segment[0][2].WE
we => segment[0][1].WE
we => segment[0][0].WE
data[0] => segment[0][0].DATAIN
data[1] => segment[0][1].DATAIN
data[2] => segment[0][2].DATAIN
data[3] => segment[0][3].DATAIN
data[4] => segment[0][4].DATAIN
data[5] => segment[0][5].DATAIN
data[6] => segment[0][6].DATAIN
data[7] => segment[0][7].DATAIN
address[0] => segment[0][7].WADDR
address[0] => segment[0][7].RADDR
address[0] => segment[0][6].WADDR
address[0] => segment[0][6].RADDR
address[0] => segment[0][5].WADDR
address[0] => segment[0][5].RADDR
address[0] => segment[0][4].WADDR
address[0] => segment[0][4].RADDR
address[0] => segment[0][3].WADDR
address[0] => segment[0][3].RADDR
address[0] => segment[0][2].WADDR
address[0] => segment[0][2].RADDR
address[0] => segment[0][1].WADDR
address[0] => segment[0][1].RADDR
address[0] => segment[0][0].WADDR
address[0] => segment[0][0].RADDR
address[1] => segment[0][7].WADDR1
address[1] => segment[0][7].RADDR1
address[1] => segment[0][6].WADDR1
address[1] => segment[0][6].RADDR1
address[1] => segment[0][5].WADDR1
address[1] => segment[0][5].RADDR1
address[1] => segment[0][4].WADDR1
address[1] => segment[0][4].RADDR1
address[1] => segment[0][3].WADDR1
address[1] => segment[0][3].RADDR1
address[1] => segment[0][2].WADDR1
address[1] => segment[0][2].RADDR1
address[1] => segment[0][1].WADDR1
address[1] => segment[0][1].RADDR1
address[1] => segment[0][0].WADDR1
address[1] => segment[0][0].RADDR1
address[2] => segment[0][7].WADDR2
address[2] => segment[0][7].RADDR2
address[2] => segment[0][6].WADDR2
address[2] => segment[0][6].RADDR2
address[2] => segment[0][5].WADDR2
address[2] => segment[0][5].RADDR2
address[2] => segment[0][4].WADDR2
address[2] => segment[0][4].RADDR2
address[2] => segment[0][3].WADDR2
address[2] => segment[0][3].RADDR2
address[2] => segment[0][2].WADDR2
address[2] => segment[0][2].RADDR2
address[2] => segment[0][1].WADDR2
address[2] => segment[0][1].RADDR2
address[2] => segment[0][0].WADDR2
address[2] => segment[0][0].RADDR2
address[3] => segment[0][7].WADDR3
address[3] => segment[0][7].RADDR3
address[3] => segment[0][6].WADDR3
address[3] => segment[0][6].RADDR3
address[3] => segment[0][5].WADDR3
address[3] => segment[0][5].RADDR3
address[3] => segment[0][4].WADDR3
address[3] => segment[0][4].RADDR3
address[3] => segment[0][3].WADDR3
address[3] => segment[0][3].RADDR3
address[3] => segment[0][2].WADDR3
address[3] => segment[0][2].RADDR3
address[3] => segment[0][1].WADDR3
address[3] => segment[0][1].RADDR3
address[3] => segment[0][0].WADDR3
address[3] => segment[0][0].RADDR3
address[4] => segment[0][7].WADDR4
address[4] => segment[0][7].RADDR4
address[4] => segment[0][6].WADDR4
address[4] => segment[0][6].RADDR4
address[4] => segment[0][5].WADDR4
address[4] => segment[0][5].RADDR4
address[4] => segment[0][4].WADDR4
address[4] => segment[0][4].RADDR4
address[4] => segment[0][3].WADDR4
address[4] => segment[0][3].RADDR4
address[4] => segment[0][2].WADDR4
address[4] => segment[0][2].RADDR4
address[4] => segment[0][1].WADDR4
address[4] => segment[0][1].RADDR4
address[4] => segment[0][0].WADDR4
address[4] => segment[0][0].RADDR4
address[5] => segment[0][7].WADDR5
address[5] => segment[0][7].RADDR5
address[5] => segment[0][6].WADDR5
address[5] => segment[0][6].RADDR5
address[5] => segment[0][5].WADDR5
address[5] => segment[0][5].RADDR5
address[5] => segment[0][4].WADDR5
address[5] => segment[0][4].RADDR5
address[5] => segment[0][3].WADDR5
address[5] => segment[0][3].RADDR5
address[5] => segment[0][2].WADDR5
address[5] => segment[0][2].RADDR5
address[5] => segment[0][1].WADDR5
address[5] => segment[0][1].RADDR5
address[5] => segment[0][0].WADDR5
address[5] => segment[0][0].RADDR5
address[6] => segment[0][7].WADDR6
address[6] => segment[0][7].RADDR6
address[6] => segment[0][6].WADDR6
address[6] => segment[0][6].RADDR6
address[6] => segment[0][5].WADDR6
address[6] => segment[0][5].RADDR6
address[6] => segment[0][4].WADDR6
address[6] => segment[0][4].RADDR6
address[6] => segment[0][3].WADDR6
address[6] => segment[0][3].RADDR6
address[6] => segment[0][2].WADDR6
address[6] => segment[0][2].RADDR6
address[6] => segment[0][1].WADDR6
address[6] => segment[0][1].RADDR6
address[6] => segment[0][0].WADDR6
address[6] => segment[0][0].RADDR6
address[7] => segment[0][7].WADDR7
address[7] => segment[0][7].RADDR7
address[7] => segment[0][6].WADDR7
address[7] => segment[0][6].RADDR7
address[7] => segment[0][5].WADDR7
address[7] => segment[0][5].RADDR7
address[7] => segment[0][4].WADDR7
address[7] => segment[0][4].RADDR7
address[7] => segment[0][3].WADDR7
address[7] => segment[0][3].RADDR7
address[7] => segment[0][2].WADDR7
address[7] => segment[0][2].RADDR7
address[7] => segment[0][1].WADDR7
address[7] => segment[0][1].RADDR7
address[7] => segment[0][0].WADDR7
address[7] => segment[0][0].RADDR7
clocki => segment[0][7].CLK0
clocki => segment[0][6].CLK0
clocki => segment[0][5].CLK0
clocki => segment[0][4].CLK0
clocki => segment[0][3].CLK0
clocki => segment[0][2].CLK0
clocki => segment[0][1].CLK0
clocki => segment[0][0].CLK0
clocko => segment[0][7].CLK1
clocko => segment[0][6].CLK1
clocko => segment[0][5].CLK1
clocko => segment[0][4].CLK1
clocko => segment[0][3].CLK1
clocko => segment[0][2].CLK1
clocko => segment[0][1].CLK1
clocko => segment[0][0].CLK1
be => ~NO_FANOUT~
q[0] <= segment[0][0].DATAOUT
q[1] <= segment[0][1].DATAOUT
q[2] <= segment[0][2].DATAOUT
q[3] <= segment[0][3].DATAOUT
q[4] <= segment[0][4].DATAOUT
q[5] <= segment[0][5].DATAOUT
q[6] <= segment[0][6].DATAOUT
q[7] <= segment[0][7].DATAOUT


|Processor|mux_3bit:inst10
mux2_a[0] => mux2_out~2.DATAB
mux2_a[1] => mux2_out~1.DATAB
mux2_a[2] => mux2_out~0.DATAB
mux2_b[0] => mux2_out~2.DATAA
mux2_b[1] => mux2_out~1.DATAA
mux2_b[2] => mux2_out~0.DATAA
mux2_choice => mux2_out~2.OUTPUTSELECT
mux2_choice => mux2_out~1.OUTPUTSELECT
mux2_choice => mux2_out~0.OUTPUTSELECT
mux2_out[0] <= mux2_out~2.DB_MAX_OUTPUT_PORT_TYPE
mux2_out[1] <= mux2_out~1.DB_MAX_OUTPUT_PORT_TYPE
mux2_out[2] <= mux2_out~0.DB_MAX_OUTPUT_PORT_TYPE


|Processor|mux:inst14
mux1_a[0] => mux1_out~7.DATAB
mux1_a[1] => mux1_out~6.DATAB
mux1_a[2] => mux1_out~5.DATAB
mux1_a[3] => mux1_out~4.DATAB
mux1_a[4] => mux1_out~3.DATAB
mux1_a[5] => mux1_out~2.DATAB
mux1_a[6] => mux1_out~1.DATAB
mux1_a[7] => mux1_out~0.DATAB
mux1_b[0] => mux1_out~7.DATAA
mux1_b[1] => mux1_out~6.DATAA
mux1_b[2] => mux1_out~5.DATAA
mux1_b[3] => mux1_out~4.DATAA
mux1_b[4] => mux1_out~3.DATAA
mux1_b[5] => mux1_out~2.DATAA
mux1_b[6] => mux1_out~1.DATAA
mux1_b[7] => mux1_out~0.DATAA
mux1_choice => mux1_out~7.OUTPUTSELECT
mux1_choice => mux1_out~6.OUTPUTSELECT
mux1_choice => mux1_out~5.OUTPUTSELECT
mux1_choice => mux1_out~4.OUTPUTSELECT
mux1_choice => mux1_out~3.OUTPUTSELECT
mux1_choice => mux1_out~2.OUTPUTSELECT
mux1_choice => mux1_out~1.OUTPUTSELECT
mux1_choice => mux1_out~0.OUTPUTSELECT
mux1_out[0] <= mux1_out~7.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[1] <= mux1_out~6.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[2] <= mux1_out~5.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[3] <= mux1_out~4.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[4] <= mux1_out~3.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[5] <= mux1_out~2.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[6] <= mux1_out~1.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[7] <= mux1_out~0.DB_MAX_OUTPUT_PORT_TYPE


|Processor|sign_extender:inst15
immediate6[0] => immediate8[0].DATAIN
immediate6[1] => immediate8[1].DATAIN
immediate6[2] => immediate8[2].DATAIN
immediate6[3] => immediate8[3].DATAIN
immediate6[4] => immediate8[4].DATAIN
immediate6[5] => immediate8[5].DATAIN
immediate6[5] => immediate8[7].DATAIN
immediate6[5] => immediate8[6].DATAIN
immediate8[0] <= immediate6[0].DB_MAX_OUTPUT_PORT_TYPE
immediate8[1] <= immediate6[1].DB_MAX_OUTPUT_PORT_TYPE
immediate8[2] <= immediate6[2].DB_MAX_OUTPUT_PORT_TYPE
immediate8[3] <= immediate6[3].DB_MAX_OUTPUT_PORT_TYPE
immediate8[4] <= immediate6[4].DB_MAX_OUTPUT_PORT_TYPE
immediate8[5] <= immediate6[5].DB_MAX_OUTPUT_PORT_TYPE
immediate8[6] <= immediate6[5].DB_MAX_OUTPUT_PORT_TYPE
immediate8[7] <= immediate6[5].DB_MAX_OUTPUT_PORT_TYPE


|Processor|adder:inst4
adder_in[0] => Add0.IN16
adder_in[1] => Add0.IN15
adder_in[2] => Add0.IN14
adder_in[3] => Add0.IN13
adder_in[4] => Add0.IN12
adder_in[5] => Add0.IN11
adder_in[6] => Add0.IN10
adder_in[7] => Add0.IN9
adder_out[0] <= Add0.DB_MAX_OUTPUT_PORT_TYPE
adder_out[1] <= Add0.DB_MAX_OUTPUT_PORT_TYPE
adder_out[2] <= Add0.DB_MAX_OUTPUT_PORT_TYPE
adder_out[3] <= Add0.DB_MAX_OUTPUT_PORT_TYPE
adder_out[4] <= Add0.DB_MAX_OUTPUT_PORT_TYPE
adder_out[5] <= Add0.DB_MAX_OUTPUT_PORT_TYPE
adder_out[6] <= Add0.DB_MAX_OUTPUT_PORT_TYPE
adder_out[7] <= Add0.DB_MAX_OUTPUT_PORT_TYPE


|Processor|mux:inst11
mux1_a[0] => mux1_out~7.DATAB
mux1_a[1] => mux1_out~6.DATAB
mux1_a[2] => mux1_out~5.DATAB
mux1_a[3] => mux1_out~4.DATAB
mux1_a[4] => mux1_out~3.DATAB
mux1_a[5] => mux1_out~2.DATAB
mux1_a[6] => mux1_out~1.DATAB
mux1_a[7] => mux1_out~0.DATAB
mux1_b[0] => mux1_out~7.DATAA
mux1_b[1] => mux1_out~6.DATAA
mux1_b[2] => mux1_out~5.DATAA
mux1_b[3] => mux1_out~4.DATAA
mux1_b[4] => mux1_out~3.DATAA
mux1_b[5] => mux1_out~2.DATAA
mux1_b[6] => mux1_out~1.DATAA
mux1_b[7] => mux1_out~0.DATAA
mux1_choice => mux1_out~7.OUTPUTSELECT
mux1_choice => mux1_out~6.OUTPUTSELECT
mux1_choice => mux1_out~5.OUTPUTSELECT
mux1_choice => mux1_out~4.OUTPUTSELECT
mux1_choice => mux1_out~3.OUTPUTSELECT
mux1_choice => mux1_out~2.OUTPUTSELECT
mux1_choice => mux1_out~1.OUTPUTSELECT
mux1_choice => mux1_out~0.OUTPUTSELECT
mux1_out[0] <= mux1_out~7.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[1] <= mux1_out~6.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[2] <= mux1_out~5.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[3] <= mux1_out~4.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[4] <= mux1_out~3.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[5] <= mux1_out~2.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[6] <= mux1_out~1.DB_MAX_OUTPUT_PORT_TYPE
mux1_out[7] <= mux1_out~0.DB_MAX_OUTPUT_PORT_TYPE


|Processor|lpm_rom1:inst18
address[0] => lpm_rom:lpm_rom_component.address[0]
address[1] => lpm_rom:lpm_rom_component.address[1]
address[2] => lpm_rom:lpm_rom_component.address[2]
address[3] => lpm_rom:lpm_rom_component.address[3]
address[4] => lpm_rom:lpm_rom_component.address[4]
address[5] => lpm_rom:lpm_rom_component.address[5]
address[6] => lpm_rom:lpm_rom_component.address[6]
address[7] => lpm_rom:lpm_rom_component.address[7]
inclock => lpm_rom:lpm_rom_component.inclock
outclock => lpm_rom:lpm_rom_component.outclock
q[0] <= lpm_rom:lpm_rom_component.q[0]
q[1] <= lpm_rom:lpm_rom_component.q[1]
q[2] <= lpm_rom:lpm_rom_component.q[2]
q[3] <= lpm_rom:lpm_rom_component.q[3]
q[4] <= lpm_rom:lpm_rom_component.q[4]
q[5] <= lpm_rom:lpm_rom_component.q[5]
q[6] <= lpm_rom:lpm_rom_component.q[6]
q[7] <= lpm_rom:lpm_rom_component.q[7]
q[8] <= lpm_rom:lpm_rom_component.q[8]
q[9] <= lpm_rom:lpm_rom_component.q[9]
q[10] <= lpm_rom:lpm_rom_component.q[10]
q[11] <= lpm_rom:lpm_rom_component.q[11]
q[12] <= lpm_rom:lpm_rom_component.q[12]
q[13] <= lpm_rom:lpm_rom_component.q[13]
q[14] <= lpm_rom:lpm_rom_component.q[14]
q[15] <= lpm_rom:lpm_rom_component.q[15]


|Processor|lpm_rom1:inst18|lpm_rom:lpm_rom_component
address[0] => altrom:srom.address[0]
address[1] => altrom:srom.address[1]
address[2] => altrom:srom.address[2]
address[3] => altrom:srom.address[3]
address[4] => altrom:srom.address[4]
address[5] => altrom:srom.address[5]
address[6] => altrom:srom.address[6]
address[7] => altrom:srom.address[7]
inclock => altrom:srom.clocki
outclock => altrom:srom.clocko
memenab => otri[15].OE
memenab => otri[14].OE
memenab => otri[13].OE
memenab => otri[12].OE
memenab => otri[11].OE
memenab => otri[10].OE
memenab => otri[9].OE
memenab => otri[8].OE
memenab => otri[7].OE
memenab => otri[6].OE
memenab => otri[5].OE
memenab => otri[4].OE
memenab => otri[3].OE
memenab => otri[2].OE
memenab => otri[1].OE
memenab => otri[0].OE
q[0] <= otri[0].DB_MAX_OUTPUT_PORT_TYPE
q[1] <= otri[1].DB_MAX_OUTPUT_PORT_TYPE
q[2] <= otri[2].DB_MAX_OUTPUT_PORT_TYPE
q[3] <= otri[3].DB_MAX_OUTPUT_PORT_TYPE
q[4] <= otri[4].DB_MAX_OUTPUT_PORT_TYPE
q[5] <= otri[5].DB_MAX_OUTPUT_PORT_TYPE
q[6] <= otri[6].DB_MAX_OUTPUT_PORT_TYPE
q[7] <= otri[7].DB_MAX_OUTPUT_PORT_TYPE
q[8] <= otri[8].DB_MAX_OUTPUT_PORT_TYPE
q[9] <= otri[9].DB_MAX_OUTPUT_PORT_TYPE
q[10] <= otri[10].DB_MAX_OUTPUT_PORT_TYPE
q[11] <= otri[11].DB_MAX_OUTPUT_PORT_TYPE
q[12] <= otri[12].DB_MAX_OUTPUT_PORT_TYPE
q[13] <= otri[13].DB_MAX_OUTPUT_PORT_TYPE
q[14] <= otri[14].DB_MAX_OUTPUT_PORT_TYPE
q[15] <= otri[15].DB_MAX_OUTPUT_PORT_TYPE


|Processor|lpm_rom1:inst18|lpm_rom:lpm_rom_component|altrom:srom
address[0] => segment[0][15].WADDR
address[0] => segment[0][15].RADDR
address[0] => segment[0][14].WADDR
address[0] => segment[0][14].RADDR
address[0] => segment[0][13].WADDR
address[0] => segment[0][13].RADDR
address[0] => segment[0][12].WADDR
address[0] => segment[0][12].RADDR
address[0] => segment[0][11].WADDR
address[0] => segment[0][11].RADDR
address[0] => segment[0][10].WADDR
address[0] => segment[0][10].RADDR
address[0] => segment[0][9].WADDR
address[0] => segment[0][9].RADDR
address[0] => segment[0][8].WADDR
address[0] => segment[0][8].RADDR
address[0] => segment[0][7].WADDR
address[0] => segment[0][7].RADDR
address[0] => segment[0][6].WADDR
address[0] => segment[0][6].RADDR
address[0] => segment[0][5].WADDR
address[0] => segment[0][5].RADDR
address[0] => segment[0][4].WADDR
address[0] => segment[0][4].RADDR
address[0] => segment[0][3].WADDR
address[0] => segment[0][3].RADDR
address[0] => segment[0][2].WADDR
address[0] => segment[0][2].RADDR
address[0] => segment[0][1].WADDR
address[0] => segment[0][1].RADDR
address[0] => segment[0][0].WADDR
address[0] => segment[0][0].RADDR
address[1] => segment[0][15].WADDR1
address[1] => segment[0][15].RADDR1
address[1] => segment[0][14].WADDR1
address[1] => segment[0][14].RADDR1
address[1] => segment[0][13].WADDR1
address[1] => segment[0][13].RADDR1
address[1] => segment[0][12].WADDR1
address[1] => segment[0][12].RADDR1
address[1] => segment[0][11].WADDR1
address[1] => segment[0][11].RADDR1
address[1] => segment[0][10].WADDR1
address[1] => segment[0][10].RADDR1
address[1] => segment[0][9].WADDR1
address[1] => segment[0][9].RADDR1
address[1] => segment[0][8].WADDR1
address[1] => segment[0][8].RADDR1
address[1] => segment[0][7].WADDR1
address[1] => segment[0][7].RADDR1
address[1] => segment[0][6].WADDR1
address[1] => segment[0][6].RADDR1
address[1] => segment[0][5].WADDR1
address[1] => segment[0][5].RADDR1
address[1] => segment[0][4].WADDR1
address[1] => segment[0][4].RADDR1
address[1] => segment[0][3].WADDR1
address[1] => segment[0][3].RADDR1
address[1] => segment[0][2].WADDR1
address[1] => segment[0][2].RADDR1
address[1] => segment[0][1].WADDR1
address[1] => segment[0][1].RADDR1
address[1] => segment[0][0].WADDR1
address[1] => segment[0][0].RADDR1
address[2] => segment[0][15].WADDR2
address[2] => segment[0][15].RADDR2
address[2] => segment[0][14].WADDR2
address[2] => segment[0][14].RADDR2
address[2] => segment[0][13].WADDR2
address[2] => segment[0][13].RADDR2
address[2] => segment[0][12].WADDR2
address[2] => segment[0][12].RADDR2
address[2] => segment[0][11].WADDR2
address[2] => segment[0][11].RADDR2
address[2] => segment[0][10].WADDR2
address[2] => segment[0][10].RADDR2
address[2] => segment[0][9].WADDR2
address[2] => segment[0][9].RADDR2
address[2] => segment[0][8].WADDR2
address[2] => segment[0][8].RADDR2
address[2] => segment[0][7].WADDR2
address[2] => segment[0][7].RADDR2
address[2] => segment[0][6].WADDR2
address[2] => segment[0][6].RADDR2
address[2] => segment[0][5].WADDR2
address[2] => segment[0][5].RADDR2
address[2] => segment[0][4].WADDR2
address[2] => segment[0][4].RADDR2
address[2] => segment[0][3].WADDR2
address[2] => segment[0][3].RADDR2
address[2] => segment[0][2].WADDR2
address[2] => segment[0][2].RADDR2
address[2] => segment[0][1].WADDR2
address[2] => segment[0][1].RADDR2
address[2] => segment[0][0].WADDR2
address[2] => segment[0][0].RADDR2
address[3] => segment[0][15].WADDR3
address[3] => segment[0][15].RADDR3
address[3] => segment[0][14].WADDR3
address[3] => segment[0][14].RADDR3
address[3] => segment[0][13].WADDR3
address[3] => segment[0][13].RADDR3
address[3] => segment[0][12].WADDR3
address[3] => segment[0][12].RADDR3
address[3] => segment[0][11].WADDR3
address[3] => segment[0][11].RADDR3
address[3] => segment[0][10].WADDR3
address[3] => segment[0][10].RADDR3
address[3] => segment[0][9].WADDR3
address[3] => segment[0][9].RADDR3
address[3] => segment[0][8].WADDR3
address[3] => segment[0][8].RADDR3
address[3] => segment[0][7].WADDR3
address[3] => segment[0][7].RADDR3
address[3] => segment[0][6].WADDR3
address[3] => segment[0][6].RADDR3
address[3] => segment[0][5].WADDR3
address[3] => segment[0][5].RADDR3
address[3] => segment[0][4].WADDR3
address[3] => segment[0][4].RADDR3
address[3] => segment[0][3].WADDR3
address[3] => segment[0][3].RADDR3
address[3] => segment[0][2].WADDR3
address[3] => segment[0][2].RADDR3
address[3] => segment[0][1].WADDR3
address[3] => segment[0][1].RADDR3
address[3] => segment[0][0].WADDR3
address[3] => segment[0][0].RADDR3
address[4] => segment[0][15].WADDR4
address[4] => segment[0][15].RADDR4
address[4] => segment[0][14].WADDR4
address[4] => segment[0][14].RADDR4
address[4] => segment[0][13].WADDR4
address[4] => segment[0][13].RADDR4
address[4] => segment[0][12].WADDR4
address[4] => segment[0][12].RADDR4
address[4] => segment[0][11].WADDR4
address[4] => segment[0][11].RADDR4
address[4] => segment[0][10].WADDR4
address[4] => segment[0][10].RADDR4
address[4] => segment[0][9].WADDR4
address[4] => segment[0][9].RADDR4
address[4] => segment[0][8].WADDR4
address[4] => segment[0][8].RADDR4
address[4] => segment[0][7].WADDR4
address[4] => segment[0][7].RADDR4
address[4] => segment[0][6].WADDR4
address[4] => segment[0][6].RADDR4
address[4] => segment[0][5].WADDR4
address[4] => segment[0][5].RADDR4
address[4] => segment[0][4].WADDR4
address[4] => segment[0][4].RADDR4
address[4] => segment[0][3].WADDR4
address[4] => segment[0][3].RADDR4
address[4] => segment[0][2].WADDR4
address[4] => segment[0][2].RADDR4
address[4] => segment[0][1].WADDR4
address[4] => segment[0][1].RADDR4
address[4] => segment[0][0].WADDR4
address[4] => segment[0][0].RADDR4
address[5] => segment[0][15].WADDR5
address[5] => segment[0][15].RADDR5
address[5] => segment[0][14].WADDR5
address[5] => segment[0][14].RADDR5
address[5] => segment[0][13].WADDR5
address[5] => segment[0][13].RADDR5
address[5] => segment[0][12].WADDR5
address[5] => segment[0][12].RADDR5
address[5] => segment[0][11].WADDR5
address[5] => segment[0][11].RADDR5
address[5] => segment[0][10].WADDR5
address[5] => segment[0][10].RADDR5
address[5] => segment[0][9].WADDR5
address[5] => segment[0][9].RADDR5
address[5] => segment[0][8].WADDR5
address[5] => segment[0][8].RADDR5
address[5] => segment[0][7].WADDR5
address[5] => segment[0][7].RADDR5
address[5] => segment[0][6].WADDR5
address[5] => segment[0][6].RADDR5
address[5] => segment[0][5].WADDR5
address[5] => segment[0][5].RADDR5
address[5] => segment[0][4].WADDR5
address[5] => segment[0][4].RADDR5
address[5] => segment[0][3].WADDR5
address[5] => segment[0][3].RADDR5
address[5] => segment[0][2].WADDR5
address[5] => segment[0][2].RADDR5
address[5] => segment[0][1].WADDR5
address[5] => segment[0][1].RADDR5
address[5] => segment[0][0].WADDR5
address[5] => segment[0][0].RADDR5
address[6] => segment[0][15].WADDR6
address[6] => segment[0][15].RADDR6
address[6] => segment[0][14].WADDR6
address[6] => segment[0][14].RADDR6
address[6] => segment[0][13].WADDR6
address[6] => segment[0][13].RADDR6
address[6] => segment[0][12].WADDR6
address[6] => segment[0][12].RADDR6
address[6] => segment[0][11].WADDR6
address[6] => segment[0][11].RADDR6
address[6] => segment[0][10].WADDR6
address[6] => segment[0][10].RADDR6
address[6] => segment[0][9].WADDR6
address[6] => segment[0][9].RADDR6
address[6] => segment[0][8].WADDR6
address[6] => segment[0][8].RADDR6
address[6] => segment[0][7].WADDR6
address[6] => segment[0][7].RADDR6
address[6] => segment[0][6].WADDR6
address[6] => segment[0][6].RADDR6
address[6] => segment[0][5].WADDR6
address[6] => segment[0][5].RADDR6
address[6] => segment[0][4].WADDR6
address[6] => segment[0][4].RADDR6
address[6] => segment[0][3].WADDR6
address[6] => segment[0][3].RADDR6
address[6] => segment[0][2].WADDR6
address[6] => segment[0][2].RADDR6
address[6] => segment[0][1].WADDR6
address[6] => segment[0][1].RADDR6
address[6] => segment[0][0].WADDR6
address[6] => segment[0][0].RADDR6
address[7] => segment[0][15].WADDR7
address[7] => segment[0][15].RADDR7
address[7] => segment[0][14].WADDR7
address[7] => segment[0][14].RADDR7
address[7] => segment[0][13].WADDR7
address[7] => segment[0][13].RADDR7
address[7] => segment[0][12].WADDR7
address[7] => segment[0][12].RADDR7
address[7] => segment[0][11].WADDR7
address[7] => segment[0][11].RADDR7
address[7] => segment[0][10].WADDR7
address[7] => segment[0][10].RADDR7
address[7] => segment[0][9].WADDR7
address[7] => segment[0][9].RADDR7
address[7] => segment[0][8].WADDR7
address[7] => segment[0][8].RADDR7
address[7] => segment[0][7].WADDR7
address[7] => segment[0][7].RADDR7
address[7] => segment[0][6].WADDR7
address[7] => segment[0][6].RADDR7
address[7] => segment[0][5].WADDR7
address[7] => segment[0][5].RADDR7
address[7] => segment[0][4].WADDR7
address[7] => segment[0][4].RADDR7
address[7] => segment[0][3].WADDR7
address[7] => segment[0][3].RADDR7
address[7] => segment[0][2].WADDR7
address[7] => segment[0][2].RADDR7
address[7] => segment[0][1].WADDR7
address[7] => segment[0][1].RADDR7
address[7] => segment[0][0].WADDR7
address[7] => segment[0][0].RADDR7
clocki => segment[0][15].CLK0
clocki => segment[0][14].CLK0
clocki => segment[0][13].CLK0
clocki => segment[0][12].CLK0
clocki => segment[0][11].CLK0
clocki => segment[0][10].CLK0
clocki => segment[0][9].CLK0
clocki => segment[0][8].CLK0
clocki => segment[0][7].CLK0
clocki => segment[0][6].CLK0
clocki => segment[0][5].CLK0
clocki => segment[0][4].CLK0
clocki => segment[0][3].CLK0
clocki => segment[0][2].CLK0
clocki => segment[0][1].CLK0
clocki => segment[0][0].CLK0
clocko => segment[0][15].CLK1
clocko => segment[0][14].CLK1
clocko => segment[0][13].CLK1
clocko => segment[0][12].CLK1
clocko => segment[0][11].CLK1
clocko => segment[0][10].CLK1
clocko => segment[0][9].CLK1
clocko => segment[0][8].CLK1
clocko => segment[0][7].CLK1
clocko => segment[0][6].CLK1
clocko => segment[0][5].CLK1
clocko => segment[0][4].CLK1
clocko => segment[0][3].CLK1
clocko => segment[0][2].CLK1
clocko => segment[0][1].CLK1
clocko => segment[0][0].CLK1
q[0] <= segment[0][0].DATAOUT
q[1] <= segment[0][1].DATAOUT
q[2] <= segment[0][2].DATAOUT
q[3] <= segment[0][3].DATAOUT
q[4] <= segment[0][4].DATAOUT
q[5] <= segment[0][5].DATAOUT
q[6] <= segment[0][6].DATAOUT
q[7] <= segment[0][7].DATAOUT
q[8] <= segment[0][8].DATAOUT
q[9] <= segment[0][9].DATAOUT
q[10] <= segment[0][10].DATAOUT
q[11] <= segment[0][11].DATAOUT
q[12] <= segment[0][12].DATAOUT
q[13] <= segment[0][13].DATAOUT
q[14] <= segment[0][14].DATAOUT
q[15] <= segment[0][15].DATAOUT


